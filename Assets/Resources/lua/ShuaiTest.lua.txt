ShuaiTest = {}
local _M = ShuaiTest

function _M.__init__()
    ShuaiTest.require()
end

function _M.require()
end

function _M.Refresh(params)
    local keyCode = params.keyCode
    local keyCodeStr = tostring(keyCode)

    package.loaded["lua/ShuaiTest"] = nil
    require("lua/ShuaiTest")

    local functionTestKeyCode = ShuaiTest["Test" .. keyCodeStr]
    if functionTestKeyCode then
        functionTestKeyCode()
    else
        TipManager.Show("Test" .. keyCodeStr .. "不存在")
    end
end

function _M.TestQ()
    print_t("QQQ", "ShuaiTest")
    -- TipManager.Show("TestQ")

    -- print_t(_VERSION, "_VERSION")

    -- print_t(UnityEngine.Screen.width, "宽度")
    -- print_t(UnityEngine.Screen.height, "高度")

    -- GameManager:StartGame()

    -- local params = {
    --     x = 1,
    --     y = 1,
    --     id = 2,
    --     attack = 100,
    --     defense = 1,
    --     hp = 1,
    -- }
    -- local item = Player:New(params)

    -- local params = {
    --     x = 1,
    --     y = 1,
    --     id = 3,
    --     attack = 100,
    --     defense = 1,
    --     hp = 1,
    -- }
    -- local item = Player:New(params)

    -- local params = {
    --     x = 1,
    --     y = 1,
    --     id = 4,
    --     attack = 100,
    --     defense = 1,
    --     hp = 1,
    -- }
    -- local item = Player:New(params)

    -- local params = {
    --     x = 2,
    --     y = 1,
    --     id = 1,
    --     attack = 1,
    --     defense = 1,
    --     hp = 1,
    -- }
    -- local item = Player:New(params)

    -- local player = Player:RandomCreate()
    -- print_t(player, "player")

    -- GamePanel:RefreshState()

    -- local n = 1
    -- local arr = {[2] = 2, [4] = 4, [8] = 8, [16] = 1, [32] = 6, [64] = 15, [128] = 40}
    -- print_t(arr, "arr")
    -- for index, value in pairs(arr) do
    --     print(value)
    --     -- if value == n then
    --     --     print(value)
    --     -- end
    -- end

    -- print_t(GamePanel:IsDayCanMove(), "白天是否可以移动~")

    -- local SeqAction = Actions.New("Sequence"):setTarget("test")
    --     SeqAction:addDelay(0.4)
    --     SeqAction:addAction(
    --         function()
    --             print(123)
    --         end
    --     )
    --     Actions:play(SeqAction)


    print_t(Item.player.gameObject, "Player.player")
    Item.player:Move({x = -1, y = 0})
    

end

function _M.TestE()
    print_t("EEE", "ShuaiTest")
    -- TipManager.Show("TestE")

    function fun1(params)
        params = params or {}
        local SeqAction = Actions.New("Sequence"):setTarget("Test")
        local transform = Player.player.transform -- functions.GetGo(GamePanel.parent, GamePanel.prefab)
        SeqAction:addAction(
            function()
                local x = params.x or math.random(1, 4)
                local y = params.y or math.random(1, 4)
                -- print("x:".. x, "y:" .. y)
                local posX = -SB.canvasWH.x / 2 + SB.cellWidth * (x - 1 + 0.5) + (SB.space * (x - 1))
                local posY = -SB.canvasWH.x / 2 + SB.cellWidth * (y - 1 + 0.5) + (SB.space * (y - 1))

                local action =
                    Actions.New(
                    "Move",
                    transform,
                    0.2,
                    transform.localPosition,
                    UnityEngine.Vector3(posX, posY, 0),
                    true
                ):setTarget("Test")
                action:setComplete(
                    function()
                    end
                )
                Actions:play(action)
            end
        )

        Actions:play(SeqAction)
    end

    -- fun1({x = 2, y = 1})
    fun1()
end

function _M.TestR()
    -- print_t("RRR", "ShuaiTest")
    -- TipManager.Show("TestR")

    fun1(4, 1)
end

function _M.TestW()
    -- print_t("WWW", "ShuaiTest")
    -- TipManager.Show("TestW")
    GamePanel:Up()
end

function _M.TestS()
    -- print_t("SSS", "ShuaiTest")
    -- TipManager.Show("TestS")
    GamePanel:Down()
end

function _M.TestA()
    -- print_t("AAA", "ShuaiTest")
    -- TipManager.Show("TestA")
    GamePanel:Left()
end

function _M.TestD()
    -- print_t("DDD", "ShuaiTest")
    -- TipManager.Show("TestD")
    GamePanel:Right()
end

_M.__init__()

-- return _M
