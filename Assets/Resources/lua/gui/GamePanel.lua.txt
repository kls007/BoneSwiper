---@class 游戏界面
GamePanel = GamePanel or {}
local _M = GamePanel

function _M:__init__()
    _M:InitView()
    _M:Main()
end

function _M:InitView()
    self.gameObject = UnityEngine.GameObject.Find("Canvas/Root_Panel/GamePanel").gameObject
    self.transform = self.gameObject.transform
    local transform = self.transform

    --
    self.ui = self.transform:Find("$ui")
    self.Button_Button_back = self.transform:Find("$Button_back"):GetComponent("Button")
    self.Image_Button_back = self.transform:Find("$Button_back"):GetComponent("Image")
    self.Text_score = self.transform:Find("$score"):GetComponent("Text")
    self.Text_currentState = self.transform:Find("$currentState"):GetComponent("Text")
    self.game = self.transform:Find("$game")
    self.Image_item = self.transform:Find("$game/$item"):GetComponent("Image")
    self.Text_Text_name = self.transform:Find("$game/$item/$Text_name"):GetComponent("Text")
    self.Text_Text_attack = self.transform:Find("$game/$item/$Text_attack"):GetComponent("Text")
    self.Text_Text_defense = self.transform:Find("$game/$item/$Text_defense"):GetComponent("Text")
    self.Text_Text_hp = self.transform:Find("$game/$item/$Text_hp"):GetComponent("Text")
    self.ResultPanel = self.transform:Find("$ResultPanel")
    self.Button_Button_replay = self.transform:Find("$ResultPanel/$Button_replay"):GetComponent("Button")
    self.Image_Button_replay = self.transform:Find("$ResultPanel/$Button_replay"):GetComponent("Image")
    self.Slider_taskTime = self.transform:Find("$Slider_taskTime"):GetComponent("Slider")
    self.Image_Background_Slider_taskTime =
        self.transform:Find("$Slider_taskTime/$Background_Slider_taskTime"):GetComponent("Image")
    self.Image_Fill_Slider_taskTime =
        self.transform:Find("$Slider_taskTime/Fill Area/$Fill_Slider_taskTime"):GetComponent("Image")
    self.Text_Text_taskTime = self.transform:Find("$Slider_taskTime/$Text_taskTime"):GetComponent("Text")
    self.day_night = self.transform:Find("$day_night")
    self.Image_Image_day = self.transform:Find("$day_night/$Image_day"):GetComponent("Image")
    self.Image_Image_night = self.transform:Find("$day_night/$Image_night"):GetComponent("Image")
    self.Text_Text_day_night = self.transform:Find("$day_night/$Text_day_night"):GetComponent("Text")

    --
end

function _M:Open()
    self.gameObject:SetActive(true)
    -- AudioManager.AudioSource_bgm_game:Play()
    _M:Start()
end

function _M:Close()
    self.gameObject:SetActive(false)
    -- AudioManager.AudioSource_bgm_game:Stop()
end

function _M:Main()
    self:InitData()
    self:AddListener()
    -- self:Start()
end

function _M:AddListener()
    UnityEngine.EventTriggerListener.Get(self.Button_Button_back.gameObject, nil).onClick = function()
        self:Close()
        MenuPanel:Open()
    end

    UnityEngine.EventTriggerListener.Get(self.Button_Button_replay.gameObject, nil).onClick = function()
        self:Start()
    end
end

function _M:Clear()
    functions.SetActiveAllChildren(self.parent, false)
end

function _M:InitData()
    GamePanel.parent = self.game.transform
    GamePanel.prefab = self.parent.transform:GetChild(0).gameObject
end

function _M:Start()
    print_t("GamePanel:Start()")
    self:Clear()

    Player:CreatePlayer()

    self.totalStep = 0
    self.currentState = 1
    self.totalNumbers = 3

    self:RefreshState()

    self.isMove = false
    self.score = 0

    self:InitUI()
end

-- 刷新UI
function _M:InitUI()
    self.ResultPanel.gameObject:SetActive(false)
    
    self.day_night.gameObject:SetActive(false)
    -- self.Image_Image_day
    -- self.Image_Image_night 
end

-- 左移
function _M:Left()
    for y = 1, SB.row, 1 do
        for x = 2, SB.col, 1 do
            local item = SB.list[y][x]
            if type(item) == "table" and type(item.Move) == "function" then
                self.isMove = item:Move({x = -1, y = 0})
            end
        end
    end
    Player:RandomCreate({x = SB.col, time = 0.4})
end

-- 右移
function _M:Right()
    for y = 1, SB.row, 1 do
        for x = SB.col - 1, 1, -1 do
            local item = SB.list[y][x]
            if type(item) == "table" and type(item.Move) == "function" then
                self.isMove = item:Move({x = 1, y = 0})
            end
        end
    end
    Player:RandomCreate({x = 1, time = 0.4})
end

-- 上移
function _M:Up()
    for x = 1, SB.col, 1 do
        for y = SB.row - 1, 1, -1 do
            local item = SB.list[y][x]
            if type(item) == "table" and type(item.Move) == "function" then
                self.isMove = item:Move({x = 0, y = 1})
            end
        end
    end
    Player:RandomCreate({y = 1, time = 0.4})
end

-- 下移
function _M:Down()
    for x = 1, SB.col, 1 do
        for y = 2, SB.row, 1 do
            local item = SB.list[y][x]
            if type(item) == "table" and type(item.Move) == "function" then
                self.isMove = item:Move({x = 0, y = -1})
            end
        end
    end
    Player:RandomCreate({y = SB.row, time = 0.4})
end

-- 检测是否游戏结束
function _M:CheckIsGameOver()
    do
        return
    end
end

function _M:Score(number)
    self.score = self.score + number
    self.Text_score.text = "当前得分: " .. self.score
end

function _M:RefreshState()
    if self.currentState > 0 then
        self.Text_currentState.text = math.abs(self.currentState)
        self.Slider_taskTime.value = math.abs(self.currentState / self.totalNumbers)
        self.Image_Background_Slider_taskTime.color = Color.HexToRGBA("FFFFFF")
        self.Image_Fill_Slider_taskTime.color = Color.HexToRGBA("FFFFFF")
    else
        self.Text_currentState.text = math.abs(self.currentState)
        GamePanel.Slider_taskTime.value = math.abs(self.currentState / self.totalNumbers)
        self.Image_Background_Slider_taskTime.color = Color.HexToRGBA("FF0000")
        self.Image_Fill_Slider_taskTime.color = Color.HexToRGBA("FF0000")
    end
end

-- 10步杀一人
function _M:NextState()
    self.totalStep = self.totalStep + 1
    if self.currentState > 0 then
        self.currentState = self.currentState + 1
        if self.currentState > self.totalNumbers then
            self.currentState = -1
        end
    else
        self.currentState = self.currentState - 1
        if self.currentState < -self.totalNumbers then
            self.currentState = 1
        end
    end
    _M:RefreshState()
end

_M:__init__()
