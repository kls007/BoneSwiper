---@class 游戏界面
GamePanel = GamePanel or {}
local _M = GamePanel

function _M:__init__()
    _M:InitView()
    _M:Main()
end

function _M:InitView()
    self.gameObject = UnityEngine.GameObject.Find("Canvas/Root_Panel/GamePanel").gameObject
    self.transform = self.gameObject.transform
    local transform = self.transform

    --
    self.Image_bg = self.transform:Find("$bg"):GetComponent("Image")
    self.Button_Button_back = self.transform:Find("$Button_back"):GetComponent("Button")
    self.Image_Button_back = self.transform:Find("$Button_back"):GetComponent("Image")
    self.Text_score = self.transform:Find("$score"):GetComponent("Text")
    self.Text_currentState = self.transform:Find("$currentState"):GetComponent("Text")
    self.Text_Text_day_night = self.transform:Find("killNumber_bg/day_night/$Text_day_night"):GetComponent("Text")
    self.Text_Text_killNumber = self.transform:Find("killNumber_bg/killNumber/$Text_killNumber"):GetComponent("Text")
    self.game = self.transform:Find("$game")
    self.Image_item = self.transform:Find("$game/$item"):GetComponent("Image")
    self.Image_Image_sleep = self.transform:Find("$game/$item/$Image_sleep"):GetComponent("Image")
    self.Image_Image_name = self.transform:Find("$game/$item/$Image_name"):GetComponent("Image")
    self.Text_Text_name = self.transform:Find("$game/$item/$Text_name"):GetComponent("Text")
    self.Text_Text_attack = self.transform:Find("$game/$item/$Text_attack"):GetComponent("Text")
    self.Text_Text_defense = self.transform:Find("$game/$item/$Text_defense"):GetComponent("Text")
    self.Text_Text_hp = self.transform:Find("$game/$item/$Text_hp"):GetComponent("Text")
    self.Image_day_night = self.transform:Find("$day_night"):GetComponent("Image")
    self.Image_Image_day = self.transform:Find("$day_night/$Image_day"):GetComponent("Image")
    self.Image_Image_night = self.transform:Find("$day_night/$Image_night"):GetComponent("Image")
    self.Slider_taskTime = self.transform:Find("$Slider_taskTime"):GetComponent("Slider")
    self.Image_Background_Slider_taskTime =
        self.transform:Find("$Slider_taskTime/$Background_Slider_taskTime"):GetComponent("Image")
    self.Image_Fill_Slider_taskTime =
        self.transform:Find("$Slider_taskTime/Fill Area/$Fill_Slider_taskTime"):GetComponent("Image")
    self.Text_Text_taskTime = self.transform:Find("$Slider_taskTime/$Text_taskTime"):GetComponent("Text")
    self.ResultPanel = self.transform:Find("$ResultPanel")
    self.Button_Button_replay = self.transform:Find("$ResultPanel/$Button_replay"):GetComponent("Button")
    self.Image_Button_replay = self.transform:Find("$ResultPanel/$Button_replay"):GetComponent("Image")
    self.debug = {
        gameObject = transform:Find("-debug").gameObject,
        Text_Text_createEnemyStep = self.transform:Find("-debug/$Text_createEnemyStep"):GetComponent("Text")
    }

    --
end

function _M:Open()
    self.gameObject:SetActive(true)
    -- AudioManager.AudioSource_bgm_game:Play()
    _M:Start()
end

function _M:Close()
    self.gameObject:SetActive(false)
    -- AudioManager.AudioSource_bgm_game:Stop()
end

function _M:Main()
    self:InitData()
    self:AddListener()
    -- self:Start()
end

function _M:AddListener()
    UnityEngine.EventTriggerListener.Get(self.Button_Button_back.gameObject, nil).onClick = function()
        self:Close()
        MenuPanel:Open()
    end

    UnityEngine.EventTriggerListener.Get(self.Button_Button_replay.gameObject, nil).onClick = function()
        self:Start()
    end

    UnityEngine.EventTriggerListener.Get(self.Image_day_night.gameObject, nil).onClick = function()
        SB.state = 1
        self.Image_day_night.gameObject:SetActive(false)
    end
end

function _M:Clear()
    functions.SetActiveAllChildren(self.parent, false)
    SB:InitList()
end

function _M:InitData()
    GamePanel.parent = self.game.transform
    GamePanel.prefab = self.parent.transform:GetChild(0).gameObject
end

function _M:GameOver()
    self.ResultPanel.gameObject:SetActive(true)
end

function _M:Start()
    self:Clear()

    SB:InitData()

    -- Item:CreatePlayer()

    

    -- self.isMove = false
    -- self.score = 0

    self:InitUI()
end

-- 刷新UI
function _M:InitUI()
    self.ResultPanel.gameObject:SetActive(false)

    self.Image_day_night.gameObject:SetActive(false)

    if SB.currentState > 0 then
        self.Image_bg.color = Color.HexToRGBA("DCDCDC")
    elseif SB.currentState < 0 then
        self.Image_bg.color = Color.HexToRGBA("101010")
    end
    self:RefreshState()

    GamePanel.debug.Text_Text_createEnemyStep.text = "刷新骷髅步数: " .. SB.createEnemyStep
end

-- 白天是否不能移动了
function _M:IsDayCanMove()
    -- 晚上一定能移动
    if SB.currentState < 0 then
        return true
    end

    for y = 1, SB.row, 1 do
        for x = 2, SB.col, 1 do
            local item = SB.list[y][x]
            if item then
                if (item.id == 2 or item.id == 3 or item.id == 4) then
                    local arr = {}
                    if SB.list[y - 1] and SB.list[y - 1][x] then
                        table.insert(arr, SB.list[y - 1][x])
                    end
                    if SB.list[y + 1] and SB.list[y + 1][x] then
                        table.insert(arr, SB.list[y + 1][x])
                    end
                    if SB.list[y] and SB.list[y][x - 1] then
                        table.insert(arr, SB.list[y][x - 1])
                    end
                    if SB.list[y] and SB.list[y][x + 1] then
                        table.insert(arr, SB.list[y][x + 1])
                    end
                    for index, value in ipairs(arr) do
                        if item.id == value.id and item[item.type] == value[value.type] then
                            return true
                        end
                    end
                end
            else
                return true
            end
        end
    end

    return false
end

-- 移动
function _M:Move(direction)
    if SB.state <= 0 then
        return
    end

    if direction.y > 0 then
        GamePanel:Up()
    elseif direction.y < 0 then
        GamePanel:Down()
    elseif direction.x < 0 then
        GamePanel:Left()
    elseif direction.x > 0 then
        GamePanel:Right()
    end

    if not GamePanel:IsDayCanMove() then
        GamePanel:ChangeDayNight()
    end

    -- 刷新所有item状态
    for y = 1, SB.row, 1 do
        for x = 1, SB.col, 1 do
            local grid = SB.list[y][x]
            local item = grid.item
            if type(item) == "table" then
                -- item:RefreshPosition()
                -- item:RefreshUI()
                item:MoveAction({x = item.x, y = item.y})

                item.isEating = false
                item.isAttacking = false
            end
        end
    end
end

-- 左移
function _M:Left()
    for y = 1, SB.row, 1 do
        for x = 2, SB.col, 1 do
            for j = x, 2, -1 do
                -- local j = x
                local item = SB.list[y][j].item
                if type(item) == "table" and type(item.Move) == "function" then
                    self.isMove = item:Move({x = -1, y = 0})
                end
            end
        end
    end
    Item:RandomCreate({x = SB.col, time = 0.4})
end

-- 右移
function _M:Right()
    for y = 1, SB.row, 1 do
        for x = SB.col - 1, 1, -1 do
            for j = x, SB.col - 1, 1 do
                local item = SB.list[y][j].item
                if type(item) == "table" and type(item.Move) == "function" then
                    self.isMove = item:Move({x = 1, y = 0})
                end
            end
        end
    end
    Item:RandomCreate({x = 1, time = 0.4})
end

-- 上移
function _M:Up()
    for x = 1, SB.col, 1 do
        for y = SB.row - 1, 1, -1 do
            for j = y, SB.row - 1, 1 do
                local item = SB.list[j][x].item
                if type(item) == "table" and type(item.Move) == "function" then
                    self.isMove = item:Move({x = 0, y = 1})
                end
            end
        end
    end
    Item:RandomCreate({y = 1, time = 0.4})
end

-- 下移
function _M:Down()
    for x = 1, SB.col, 1 do
        for y = 2, SB.row, 1 do
            for j = y, 2, -1 do
                local item = SB.list[j][x].item
                if type(item) == "table" and type(item.Move) == "function" then
                    self.isMove = item:Move({x = 0, y = -1})
                end
            end
        end
    end
    Item:RandomCreate({y = SB.row, time = 0.4})
end

function _M:RefreshState()
    self.Slider_taskTime.value = math.abs(SB.currentState / SB.totalNumbers)
    self.Text_currentState.text = math.abs(SB.currentState)
    if SB.currentState > 0 then
        self.Image_Background_Slider_taskTime.color = Color.HexToRGBA("FFFFFF")
        self.Image_Fill_Slider_taskTime.color = Color.HexToRGBA("FFFFFF")
    else
        self.Image_Background_Slider_taskTime.color = Color.HexToRGBA("FF0000")
        self.Image_Fill_Slider_taskTime.color = Color.HexToRGBA("FF0000")
    end

    if SB.currentState > 0 then
        self.Text_Text_day_night.text = "日"
    elseif SB.currentState < 0 then
        self.Text_Text_day_night.text = "夜"
    end
end

-- 10步杀一人 下一步
function _M:NextStep()
    -- :TODO
do return end


    SB.currentState = SB.currentState + SB.currentState / math.abs(SB.currentState)
    self.Slider_taskTime.value = math.abs(SB.currentState / SB.totalNumbers)
    self.Text_currentState.text = math.abs(SB.currentState)

    if math.abs(SB.currentState) >= SB.totalNumbers then
        self:ChangeDayNight()
    end

    SB.createEnemyStep = SB.createEnemyStep - 1
    GamePanel.debug.Text_Text_createEnemyStep.text = "刷新骷髅步数: " .. SB.createEnemyStep
end

function _M:ChangeDayNight()
    SB.state = 0 -- 暂停

    SB.currentState = -SB.currentState / math.abs(SB.currentState)

    self.Image_day_night.gameObject:SetActive(true)
    self.Image_Image_day.gameObject:SetActive(SB.currentState > 0)
    self.Image_Image_night.gameObject:SetActive(SB.currentState < 0)

    if SB.currentState > 0 then
        self.Image_bg.color = Color.HexToRGBA("DCDCDC")
    elseif SB.currentState < 0 then
        self.Image_bg.color = Color.HexToRGBA("101010")
    end
    self:RefreshState()

    for y = 1, SB.row, 1 do
        for x = 1, SB.col, 1 do
            local item = SB.list[y][x]
            if type(item) == "table" and type(item.DayNight) == "function" then
                item:DayNight()
            end
        end
    end
end

_M:__init__()
